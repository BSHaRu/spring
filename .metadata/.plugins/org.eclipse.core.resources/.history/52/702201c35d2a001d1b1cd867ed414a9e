package net.koreate.sec.util;

import java.util.Hashtable;
import java.util.Map;

import org.springframework.security.core.Authentication;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import net.koreate.sec.security.user.CustomUser;
import net.koreate.sec.vo.ValidationMemberVO;

public class ChatHandler extends TextWebSocketHandler {

	// Map : 사용자 id | session 정보 
	// 전제 조건이 시큐리티 사용하는 가정하에 사용자 id를 가져오는거라
	// 시큐리티를 이용하면 session에서 해당 정보를 바로 가져올 수 있고,
	// 시큐리티 사용 안하면 다른방법으로 가져 와야됨
	private Map<String, WebSocketSession> sessionMap = new Hashtable<>();
	
	@Override
	public void afterConnectionEstablished(WebSocketSession session) throws Exception {
		System.out.println("연결 완료 : " + session.getId());
		
		String userName = session.getPrincipal().getName();
		System.out.println("userName : " + userName);
		Authentication auth = (Authentication) session.getPrincipal(); // 인가된 사용자 정보
		CustomUser customUser = (CustomUser) auth.getPrincipal();
		ValidationMemberVO vo = customUser.getMember();
		System.out.println("vo : " + vo);
		sessionMap.put(userName, session);
		
	}

	@Override
	protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
		// client에서 전달된 문자열 메세지 정보
		String msg = message.getPayload();
		System.out.println("msg : " + msg);
		for(WebSocketSession s : sessionMap.values()) {
			s.sendMessage(new TextMessage(msg));
		}
	}

	@Override
	public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
		System.out.println("연결 종료 : " + session.getId());
		
		String userName = session.getPrincipal().getName();
		sessionMap.remove(userName);
	}

	
	
}
