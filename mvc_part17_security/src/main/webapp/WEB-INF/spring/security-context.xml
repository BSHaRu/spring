<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-5.7.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<bean id="successHandler"
		class="net.koreate.security.CustomLoginSuccessHandler" />
	
	<!-- auto-config="true" : 이거 설정해두면 login,logout page가 없어도  security에서 알아서 제공해줌 -->
	<security:http use-expressions="true">
		<!-- security는 post 방식이면 무.조.건. csrf token을 검증함 / true는 임시로 test할때만 사용하는거임  -->
		<!-- <security:csrf disabled="true"/> -->
	
		<security:intercept-url pattern="/test/master" access="hasRole('ROLE_ADMIN')" />
		<security:intercept-url pattern="/test/member" access="hasAnyRole('ROLE_MEMBER','ROLE_ADMIN')" />
		<security:intercept-url pattern="/test/all" access="permitAll" />
					<!-- access 권한
					- hasRole(Role) : 해당 Role 을 갖고있는 사용자 허용
					- hasAnyRole(Role1, Role2, ...) : 해당 Role 중에 1개이상 갖고있는 사용자 허용
					- anonymous : 익명 사용자 허용
					- authenticated : 인증된 사용자 허용
					- permitAll : 모든 접근을 허용
					- denyAll : 모든 접근을 거부
					 -->
		
		<!-- 
			login-page : 몰 ? 루
			login-processing-url: form태그의 action에서 반응하는 친구 
			authentication-success-handler-ref : 로그인 성공 후 해당 핸들러 실행
			authentication-failure-url : 실패하면 보여줄 url
		-->
		 <security:form-login login-page="/login"		
		 					login-processing-url="/login" 
		 					username-parameter="u_id"
		 					password-parameter="u_pw"
		 					authentication-success-handler-ref="successHandler"
		 					authentication-failure-url="/"/>  
		 					
		 <!-- 자동 로그인(security가 알아서 쿠키랑 세션 관리해줌) -->					
		 <security:remember-me
		 	remember-me-cookie="userCookie"
		 	remember-me-parameter="rememberMe"
		 	token-validity-seconds="2419200"/> <!-- 쿠키 토큰 유지시간 -->
		 
		 <security:logout 
		 	logout-url="/logout"
		 	invalidate-session="true"
		 	logout-success-url="/"
		 	delete-cookies="userCookie"/> 
		 <!--
		 	invalidate-session="true" : 로그아웃 할 때 새로운 새션을 제공할지 말지 선택 
		 	logout-success-url="/"	: 로그아웃 성공 후 보여줄 page
		 	delete-cookies="userCookie" : 로그 아웃 후 해당 쿠키이름 삭제(여러개면 ,찍어서 나열가능)
	 	 -->
	 	 
	 	 <security:access-denied-handler error-page="/errorForbiden" />
	 	 
	 	 <!-- 중복 로그인 처리 -->
		 <security:session-management>
		 	<security:concurrency-control
		 		max-sessions="1" 
		 		error-if-maximum-exceeded="false" 
		 		expired-url="/logOff" />
		 </security:session-management>
		 <!-- 
		 	error-if-maximum-exceeded="true"
		 	 - 이미 로그인 한 대상이 있을 경우 2차 로그인 방지
		 	error-if-maximum-exceeded="false"
		 	 - 기존 연결을 끊고 새로운 사용자 로그인
		  -->
		 	
	</security:http>
	
	<security:authentication-manager>
		<security:authentication-provider>
			<security:user-service>
				<!-- password="{noop}" : 암호화를 사용 안하겠다 => 지금은 test라 안하지만 실제론 해야됨 -->
				<security:user name="member" password="{noop}member" authorities="ROLE_MEMBER"/>
				<security:user name="master" password="{noop}master" authorities="ROLE_ADMIN"/>
			</security:user-service>
		</security:authentication-provider>
	</security:authentication-manager>
</beans>
